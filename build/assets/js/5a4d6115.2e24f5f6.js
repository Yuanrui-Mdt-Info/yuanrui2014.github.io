"use strict";(self.webpackChunkdocu=self.webpackChunkdocu||[]).push([[845],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),c=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,h=u["".concat(p,".").concat(d)]||u[d]||m[d]||i;return n?o.createElement(h,l(l({ref:t},s),{},{components:n})):o.createElement(h,l({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a.mdxType="string"==typeof e?e:r,l[1]=a;for(var c=2;c<i;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},78081:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=n(87462),r=(n(67294),n(3905));const i={},l="Monorepo Python Development",a={unversionedId:"contributing-to-airbyte/monorepo-python-development",id:"contributing-to-airbyte/monorepo-python-development",title:"Monorepo Python Development",description:"This guide contains instructions on how to setup Python with Gradle within the Airbyte Monorepo. If you are a contributor working on one or two connectors, this page is most likely not relevant to you. Instead, you should use your standard Python development flow.",source:"@site/../docs/contributing-to-airbyte/monorepo-python-development.md",sourceDirName:"contributing-to-airbyte",slug:"/contributing-to-airbyte/monorepo-python-development",permalink:"/contributing-to-airbyte/monorepo-python-development",draft:!1,editUrl:"https://github.com/airbytehq/airbyte/blob/master/docs/../docs/contributing-to-airbyte/monorepo-python-development.md",tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"Developing on Kubernetes",permalink:"/contributing-to-airbyte/developing-on-kubernetes"},next:{title:"Code Style",permalink:"/contributing-to-airbyte/code-style"}},p={},c=[{value:"Python Connector Development",id:"python-connector-development",level:2},{value:"Formatting/linting",id:"formattinglinting",level:2},{value:"IDE",id:"ide",level:2},{value:"Autocompletion",id:"autocompletion",level:3},{value:"PyCharm (ItelliJ IDEA)",id:"pycharm-itellij-idea",level:3},{value:"Excluding files from venv",id:"excluding-files-from-venv",level:3}],s={toc:c};function m(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,o.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"monorepo-python-development"},"Monorepo Python Development"),(0,r.kt)("p",null,"This guide contains instructions on how to setup Python with Gradle within the Airbyte Monorepo. If you are a contributor working on one or two connectors, this page is most likely not relevant to you. Instead, you should use your standard Python development flow."),(0,r.kt)("h2",{id:"python-connector-development"},"Python Connector Development"),(0,r.kt)("p",null,"Before working with connectors written in Python, we recommend running the following command from the airbyte root directory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python3 tools/bin/update_intellij_venv.py -modules <connector directory name> --install-venv\n")),(0,r.kt)("p",null,"e.g"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python tools/bin/update_intellij_venv.py -modules source-stripe --install-venv\n")),(0,r.kt)("p",null,"If using Pycharm or IntelliJ, you'll also want to add the interpreter to the IDE's list of known interpreters. You can do this by adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"--update-intellij")," flag. More details can be found ",(0,r.kt)("a",{parentName:"p",href:"#ide"},"here")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python tools/bin/update_intellij_venv.py -modules <connector directory name> --install-venv --update-intellij\n")),(0,r.kt)("p",null,"If working with many connectors, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"--all-modules")," flag to install the virtual environments for all connectors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python tools/bin/update_intellij_venv.py --all-modules --install-venv\n")),(0,r.kt)("p",null,"This will create a ",(0,r.kt)("inlineCode",{parentName:"p"},"virtualenv")," and install dependencies for the connector you want to work on as well as any internal Airbyte python packages it depends on."),(0,r.kt)("p",null,"When iterating on a single connector, you will often iterate by running"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"./gradlew :airbyte-integrations:connectors:your-connector-dir:build\n")),(0,r.kt)("p",null,"This command will:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Install a virtual environment at ",(0,r.kt)("inlineCode",{parentName:"li"},"airbyte-integrations/connectors/<your-connector-dir>/.venv")),(0,r.kt)("li",{parentName:"ol"},"Install local development dependencies specified in ",(0,r.kt)("inlineCode",{parentName:"li"},"airbyte-integrations/connectors/your-connector-dir/requirements.txt")),(0,r.kt)("li",{parentName:"ol"},"Runs the following pip modules:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://pypi.org/project/black/"},"Black")," to lint the code"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://pypi.org/project/isort/"},"isort")," to sort imports"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://pypi.org/project/flake8/"},"Flake8")," to check formatting"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://pypi.org/project/mypy/"},"MyPy")," to check type usage")))),(0,r.kt)("h2",{id:"formattinglinting"},"Formatting/linting"),(0,r.kt)("p",null,"To format and lint your code before commit you can use the Gradle command above, but for convenience we support ",(0,r.kt)("a",{parentName:"p",href:"https://pre-commit.com/"},"pre-commit")," tool. To use it you need to install it first:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install pre-commit\n")),(0,r.kt)("p",null,"then, to install ",(0,r.kt)("inlineCode",{parentName:"p"},"pre-commit")," as a git hook, run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"pre-commit install\n")),(0,r.kt)("p",null,"That's it, ",(0,r.kt)("inlineCode",{parentName:"p"},"pre-commit")," will format/lint the code every time you commit something. You find more information about pre-commit ",(0,r.kt)("a",{parentName:"p",href:"https://pre-commit.com/"},"here"),"."),(0,r.kt)("h2",{id:"ide"},"IDE"),(0,r.kt)("p",null,"At Airbyte, we use IntelliJ IDEA for development. Although it is possible to develop connectors with any IDE, we typically recommend IntelliJ IDEA or PyCharm, since we actively work towards compatibility."),(0,r.kt)("h3",{id:"autocompletion"},"Autocompletion"),(0,r.kt)("p",null,"Install the ",(0,r.kt)("a",{parentName:"p",href:"https://plugins.jetbrains.com/plugin/12861-pydantic"},"Pydantic")," plugin. This will help autocompletion with some of our internal types."),(0,r.kt)("h3",{id:"pycharm-itellij-idea"},"PyCharm ","(","ItelliJ IDEA",")"),(0,r.kt)("p",null,"The following setup steps are written for PyCharm but should have similar equivalents for IntelliJ IDEA:"),(0,r.kt)("p",null,"1.",(0,r.kt)("inlineCode",{parentName:"p"},"python tools/bin/update_intellij_venv.py -modules <your-connector-dir> --update-intellij")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Restart PyCharm"),(0,r.kt)("li",{parentName:"ol"},"Go to ",(0,r.kt)("inlineCode",{parentName:"li"},"File -> New -> Project...")),(0,r.kt)("li",{parentName:"ol"},"Select ",(0,r.kt)("inlineCode",{parentName:"li"},"Pure Python"),"."),(0,r.kt)("li",{parentName:"ol"},"Select a project name like ",(0,r.kt)("inlineCode",{parentName:"li"},"airbyte")," and a directory ",(0,r.kt)("strong",{parentName:"li"},"outside of")," the ",(0,r.kt)("inlineCode",{parentName:"li"},"airbyte")," code root."),(0,r.kt)("li",{parentName:"ol"},"Go to ",(0,r.kt)("inlineCode",{parentName:"li"},"Preferences -> Project -> Python Interpreter")),(0,r.kt)("li",{parentName:"ol"},"Find a gear \u2699\ufe0f button next to ",(0,r.kt)("inlineCode",{parentName:"li"},"Python interpreter")," dropdown list, click and select ",(0,r.kt)("inlineCode",{parentName:"li"},"Add")),(0,r.kt)("li",{parentName:"ol"},"Select ",(0,r.kt)("inlineCode",{parentName:"li"},"Virtual Environment -> Existing")),(0,r.kt)("li",{parentName:"ol"},"Set the interpreter path to the one that was created by Python command, i.e. ",(0,r.kt)("inlineCode",{parentName:"li"},"airbyte-integrations/connectors/<your-connector-dir>/.venv/bin/python"),"."),(0,r.kt)("li",{parentName:"ol"},"Wait for PyCharm to finish indexing and loading skeletons from selected virtual environment.")),(0,r.kt)("p",null,"You should now have access to code completion and proper syntax highlighting for python projects."),(0,r.kt)("p",null,"If you need to work on another connector you can quickly change the current virtual environment in the bottom toolbar."),(0,r.kt)("h3",{id:"excluding-files-from-venv"},"Excluding files from venv"),(0,r.kt)("p",null,"By default, the find function in IntelliJ is not scoped and will include all files in the monorepo, including all the libraries installed as part of a connector's virtual environment. This huge volume of files makes indexing and search very slow. You can ignore files from the connectors' virtual environment with the following steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Open the project structure using ",(0,r.kt)("inlineCode",{parentName:"li"},"cmd-;")),(0,r.kt)("li",{parentName:"ol"},'Navigate to the "Project Settings / Modules" section in the right-side of the menu'),(0,r.kt)("li",{parentName:"ol"},"Select the top level ",(0,r.kt)("inlineCode",{parentName:"li"},"airbyte")," module so the change is applied to all submodules"),(0,r.kt)("li",{parentName:"ol"},"Add the following filter to the ",(0,r.kt)("inlineCode",{parentName:"li"},"Exclude files")," option: ",(0,r.kt)("inlineCode",{parentName:"li"},"connectors/**/.venv")),(0,r.kt)("li",{parentName:"ol"},"Press OK to confirm your options.")),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(43377).Z,width:"2048",height:"1676"})))}m.isMDXComponent=!0},43377:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/monorepo-exclude-files-ef0859e2bf1f3e8208fa4014c7a01d9a.png"}}]);