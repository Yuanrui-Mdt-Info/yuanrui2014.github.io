"use strict";(self.webpackChunkdocu=self.webpackChunkdocu||[]).push([[1928],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(a),u=r,h=m["".concat(l,".").concat(u)]||m[u]||p[u]||o;return a?n.createElement(h,i(i({ref:t},d),{},{components:a})):n.createElement(h,i({ref:t},d))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},42239:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const o={},i="Glossary of Terms",s={unversionedId:"understanding-airbyte/glossary",id:"understanding-airbyte/glossary",title:"Glossary of Terms",description:"Airbyte CDK",source:"@site/../docs/understanding-airbyte/glossary.md",sourceDirName:"understanding-airbyte",slug:"/understanding-airbyte/glossary",permalink:"/understanding-airbyte/glossary",draft:!1,editUrl:"https://github.com/airbytehq/airbyte/blob/master/docs/../docs/understanding-airbyte/glossary.md",tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"Json to Avro Conversion for Blob Storage Destinations",permalink:"/understanding-airbyte/json-avro-conversion"},next:{title:"Airbyte Security",permalink:"/operator-guides/security"}},l={},c=[{value:"Airbyte CDK",id:"airbyte-cdk",level:3},{value:"DAG",id:"dag",level:3},{value:"ETL/ELT",id:"etlelt",level:3},{value:"Full Refresh Sync",id:"full-refresh-sync",level:3},{value:"Incremental Sync",id:"incremental-sync",level:3},{value:"Partial Success",id:"partial-success",level:3},{value:"Raw Tables",id:"raw-tables",level:3},{value:"Advanced Terms",id:"advanced-terms",level:2},{value:"AirbyteCatalog",id:"airbytecatalog",level:3},{value:"Airbyte Specification",id:"airbyte-specification",level:3},{value:"Temporal",id:"temporal",level:3}],d={toc:c};function p(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"glossary-of-terms"},"Glossary of Terms"),(0,r.kt)("h3",{id:"airbyte-cdk"},"Airbyte CDK"),(0,r.kt)("p",null,"The Airbyte CDK (Connector Development Kit) allows you to create connectors for Sources or Destinations.\nIf your source or destination doesn't exist, you can use the CDK to make the building process a lot easier.\nIt generates all the tests and files you need and all you need to do is write the connector-specific code\nfor your source or destination. We created one in Python which you can check out ",(0,r.kt)("a",{parentName:"p",href:"../connector-development/cdk-python/"},"here"),"\nand the Faros AI team created a Javascript/Typescript one that you can check out ",(0,r.kt)("a",{parentName:"p",href:"/connector-development/cdk-faros-js"},"here"),"."),(0,r.kt)("h3",{id:"dag"},"DAG"),(0,r.kt)("p",null,"DAG stands for ",(0,r.kt)("strong",{parentName:"p"},"Directed Acyclic Graph"),". It's a term originally coined by math graph theorists that\ndescribes a tree-like process that cannot contain loops. For example, in the following diagram, you start\nat A and can choose B or C, which then proceed to D and E, respectively. This kind of structure is great\nfor representing workflows and is what tools like ",(0,r.kt)("a",{parentName:"p",href:"https://airflow.apache.org"},"Airflow")," use to orchestrate\nthe execution of software based on different cases or states."),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(70913).Z,width:"900",height:"525"})),(0,r.kt)("h3",{id:"etlelt"},"ETL/ELT"),(0,r.kt)("p",null,"Stands for ",(0,r.kt)("strong",{parentName:"p"},"E"),"xtract, ",(0,r.kt)("strong",{parentName:"p"},"T"),"ransform, and ",(0,r.kt)("strong",{parentName:"p"},"L"),"oad and ",(0,r.kt)("strong",{parentName:"p"},"E"),"xtract, ",(0,r.kt)("strong",{parentName:"p"},"L"),"oad, and ",(0,r.kt)("strong",{parentName:"p"},"T"),"ransform, respectively."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Extract"),": Retrieve data from a ",(0,r.kt)("a",{parentName:"p",href:"/integrations/#Sources"},"source"),", which can be an application, database, anything really."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Load"),": Move data to your ",(0,r.kt)("a",{parentName:"p",href:"/integrations/#Destinations"},"destination"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Transform"),": Clean up the data. This is referred to as ",(0,r.kt)("a",{parentName:"p",href:"/understanding-airbyte/basic-normalization"},"normalization"),"\nin Airbyte and involves ",(0,r.kt)("a",{parentName:"p",href:"/understanding-airbyte/connections/incremental-deduped-history"},"deduplication"),", changing data types, formats, and more."),(0,r.kt)("h3",{id:"full-refresh-sync"},"Full Refresh Sync"),(0,r.kt)("p",null,"A ",(0,r.kt)("strong",{parentName:"p"},"Full Refresh Sync")," will attempt to retrieve all data from the source every time a sync is run.\nThen there are two choices, ",(0,r.kt)("strong",{parentName:"p"},"Overwrite")," and ",(0,r.kt)("strong",{parentName:"p"},"Append"),". ",(0,r.kt)("strong",{parentName:"p"},"Overwrite")," deletes the data in the destination before running the\nsync and ",(0,r.kt)("strong",{parentName:"p"},"Append")," doesn't."),(0,r.kt)("h3",{id:"incremental-sync"},"Incremental Sync"),(0,r.kt)("p",null,"An ",(0,r.kt)("strong",{parentName:"p"},"Incremental Sync")," will only retrieve new data from the source when a sync occurs.\nThe first sync will always attempt to retrieve all the data.\nIf the ",(0,r.kt)("a",{parentName:"p",href:"https://discuss.airbyte.io/t/what-destinations-support-the-incremental-deduped-sync-mode/89"},"destination supports it"),",\nyou can have your data deduplicated. Simply put, this just means that if you sync an updated\nversion of a record you've already synced, it will remove the old record."),(0,r.kt)("h3",{id:"partial-success"},"Partial Success"),(0,r.kt)("p",null,"A ",(0,r.kt)("strong",{parentName:"p"},"Partial Success")," indicates that some records were successfully committed to the destination during a sync,\neven when the overall sync status was reported as a failure. "),(0,r.kt)("h3",{id:"raw-tables"},"Raw Tables"),(0,r.kt)("p",null,"Airbyte spits out tables with the prefix ",(0,r.kt)("inlineCode",{parentName:"p"},"_airbyte_raw_"),". This is your replicated data, but the prefix\nindicates that it's not normalized. If you select basic normalization, Airbyte will create renamed versions without the prefix."),(0,r.kt)("h2",{id:"advanced-terms"},"Advanced Terms"),(0,r.kt)("h3",{id:"airbytecatalog"},"AirbyteCatalog"),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This is only relevant for individuals who want to create a connector."))),(0,r.kt)("p",null,"This refers to how you define the data that you can retrieve from a Source. For example,\nif you want to retrieve information from an API, the data that you can receive needs to be\ndefined clearly so that Airbyte can have a clear expectation of what endpoints are supported\nand what the objects that the streams return look like. This is represented as a sort of schema\nthat Airbyte can interpret. Learn more ",(0,r.kt)("a",{parentName:"p",href:"/understanding-airbyte/beginners-guide-to-catalog"},"here"),"."),(0,r.kt)("h3",{id:"airbyte-specification"},"Airbyte Specification"),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This is only relevant for individuals who want to create a connector."))),(0,r.kt)("p",null,"This refers to the functions that a Source or Destination must implement to successfully\nretrieve data and load it, respectively. Implementing these functions using the Airbyte\nSpecification makes a Source or Destination work correctly. Learn more ",(0,r.kt)("a",{parentName:"p",href:"/understanding-airbyte/airbyte-protocol"},"here"),"."),(0,r.kt)("h3",{id:"temporal"},"Temporal"),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This is only relevant for individuals who want to learn about or contribute to our underlying platform."))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://temporal.io"},"Temporal")," is a development kit that lets you create workflows,\nparallelize them, and handle failures/retries gracefully. We use it to reliably schedule each step\nof the ELT process, and a Temporal service is always deployed with each Airbyte installation."))}p.isMDXComponent=!0},70913:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/glossary_dag_example-31fdb7fac5744f36c092612e81895fd1.png"}}]);