"use strict";(self.webpackChunkdocu=self.webpackChunkdocu||[]).push([[5856],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?o.createElement(h,i(i({ref:t},l),{},{components:n})):o.createElement(h,i({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},99731:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var o=n(87462),r=(n(67294),n(3905));const a={},i="Step 2: Install dependencies",c={unversionedId:"connector-development/config-based/tutorial/install-dependencies",id:"connector-development/config-based/tutorial/install-dependencies",title:"Step 2: Install dependencies",description:"Let's create a python virtual environment for our source.",source:"@site/../docs/connector-development/config-based/tutorial/2-install-dependencies.md",sourceDirName:"connector-development/config-based/tutorial",slug:"/connector-development/config-based/tutorial/install-dependencies",permalink:"/connector-development/config-based/tutorial/install-dependencies",draft:!1,editUrl:"https://github.com/airbytehq/airbyte/blob/master/docs/../docs/connector-development/config-based/tutorial/2-install-dependencies.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{}},s={},p=[{value:"Next steps",id:"next-steps",level:2},{value:"More readings",id:"more-readings",level:2}],l={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"step-2-install-dependencies"},"Step 2: Install dependencies"),(0,r.kt)("p",null,"Let's create a python virtual environment for our source.\nYou can do this by executing the following commands from the root of the Airbyte repository."),(0,r.kt)("p",null,"The command below assume that ",(0,r.kt)("inlineCode",{parentName:"p"},"python")," points to a version of python ",">","=3.9.0. On some systems, ",(0,r.kt)("inlineCode",{parentName:"p"},"python")," points to a Python2 installation and ",(0,r.kt)("inlineCode",{parentName:"p"},"python3")," points to Python3.\nIf this is the case on your machine, substitute the ",(0,r.kt)("inlineCode",{parentName:"p"},"python")," commands with ",(0,r.kt)("inlineCode",{parentName:"p"},"python3"),".\nThe subsequent ",(0,r.kt)("inlineCode",{parentName:"p"},"python")," invocations will use the virtual environment created for the connector."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd ../../connectors/source-exchange-rates-tutorial\n$ python -m venv .venv\n$ source .venv/bin/activate\n$ pip install -r requirements.txt\n")),(0,r.kt)("p",null,"These steps create an initial python environment, and install the dependencies required to run an API Source connector."),(0,r.kt)("p",null,"Let's verify everything works as expected by running the Airbyte ",(0,r.kt)("inlineCode",{parentName:"p"},"spec")," operation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ python main.py spec\n")),(0,r.kt)("p",null,"You should see an output similar to the one below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{"type": "SPEC", "spec": {"documentationUrl": "https://docsurl.com", "connectionSpecification": {"$schema": "http://json-schema.org/draft-07/schema#", "title": "Python Http Tutorial Spec", "type": "object", "required": ["TODO"], "additionalProperties": false, "properties": {"TODO: This schema defines the configuration required for the source. This usually involves metadata such as database and/or authentication information.": {"type": "string", "description": "describe me"}}}}}\n')),(0,r.kt)("p",null,"This is a simple sanity check to make sure everything is wired up correctly.\nMore details on the ",(0,r.kt)("inlineCode",{parentName:"p"},"spec")," operation can be found in ",(0,r.kt)("a",{parentName:"p",href:"https://docs.airbyte.com/connector-development/cdk-python/basic-concepts"},"Basic Concepts")," and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.airbyte.com/connector-development/cdk-python/schemas"},"Defining Stream Schemas"),"."),(0,r.kt)("p",null,"For now, note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"main.py")," file is a convenience wrapper to help run the connector.\nIts invocation format is ",(0,r.kt)("inlineCode",{parentName:"p"},"python main.py <command> [args]"),".\nThe module's generated ",(0,r.kt)("inlineCode",{parentName:"p"},"README.md")," contains more details on the supported commands."),(0,r.kt)("h2",{id:"next-steps"},"Next steps"),(0,r.kt)("p",null,"Next, we'll ",(0,r.kt)("a",{parentName:"p",href:"/connector-development/config-based/tutorial/connecting-to-the-API-source"},"connect to the API source")),(0,r.kt)("h2",{id:"more-readings"},"More readings"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.airbyte.com/connector-development/cdk-python/basic-concepts"},"Basic Concepts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.airbyte.com/connector-development/cdk-python/schemas"},"Defining Stream Schemas")),(0,r.kt)("li",{parentName:"ul"},"The module's generated ",(0,r.kt)("inlineCode",{parentName:"li"},"README.md")," contains more details on the supported commands.")))}d.isMDXComponent=!0}}]);