"use strict";(self.webpackChunkdocu=self.webpackChunkdocu||[]).push([[9287],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,s(s({ref:t},l),{},{components:n})):a.createElement(h,s({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},24033:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={},s="Python CDK Speedrun: Creating a Source",i={unversionedId:"connector-development/tutorials/cdk-speedrun-deprecated",id:"connector-development/tutorials/cdk-speedrun-deprecated",title:"Python CDK Speedrun: Creating a Source",description:"CDK Speedrun \\(HTTP API Source Creation Any% Route\\)",source:"@site/../docs/connector-development/tutorials/cdk-speedrun-deprecated.md",sourceDirName:"connector-development/tutorials",slug:"/connector-development/tutorials/cdk-speedrun-deprecated",permalink:"/connector-development/tutorials/cdk-speedrun-deprecated",draft:!1,editUrl:"https://github.com/airbytehq/airbyte/blob/master/docs/../docs/connector-development/tutorials/cdk-speedrun-deprecated.md",tags:[],version:"current",frontMatter:{}},p={},c=[{value:"CDK Speedrun (HTTP API Source Creation Any% Route)",id:"cdk-speedrun-http-api-source-creation-any-route",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Generate the Template",id:"generate-the-template",level:4},{value:"Create Dev Environment",id:"create-dev-environment",level:4},{value:"Define Connector Inputs",id:"define-connector-inputs",level:3},{value:"Define your Stream",id:"define-your-stream",level:3},{value:"Reading Data from the Source",id:"reading-data-from-the-source",level:3}],l={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"python-cdk-speedrun-creating-a-source"},"Python CDK Speedrun: Creating a Source"),(0,r.kt)("h2",{id:"cdk-speedrun-http-api-source-creation-any-route"},"CDK Speedrun ","(","HTTP API Source Creation ",(0,r.kt)("a",{parentName:"h2",href:"https://en.wikipedia.org/wiki/Speedrun#:~:text=Any%25%2C%20or%20fastest%20completion%2C,the%20game%20to%20its%20fullest.&text=Specific%20requirements%20for%20a%20100,different%20depending%20on%20the%20game."},"Any%")," Route",")"),(0,r.kt)("p",null,"This is a blazing fast guide to building an HTTP source connector. Think of it as the TL;DR version of ",(0,r.kt)("a",{parentName:"p",href:"/connector-development/tutorials/cdk-tutorial-python-http/getting-started"},"this tutorial.")),(0,r.kt)("h2",{id:"dependencies"},"Dependencies"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Python ",">","= 3.9"),(0,r.kt)("li",{parentName:"ol"},"Docker"),(0,r.kt)("li",{parentName:"ol"},"NodeJS")),(0,r.kt)("h4",{id:"generate-the-template"},"Generate the Template"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd airbyte-integrations/connector-templates/generator # start from repo root\n$ ./generate.sh\n")),(0,r.kt)("p",null,"Select the ",(0,r.kt)("inlineCode",{parentName:"p"},"Python HTTP API Source")," and name it ",(0,r.kt)("inlineCode",{parentName:"p"},"python-http-example"),"."),(0,r.kt)("h4",{id:"create-dev-environment"},"Create Dev Environment"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ../../connectors/source-python-http-example\npython -m venv .venv # Create a virtual environment in the .venv directory\nsource .venv/bin/activate\npip install -r requirements.txt\n")),(0,r.kt)("h3",{id:"define-connector-inputs"},"Define Connector Inputs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd source_python_http_example\n")),(0,r.kt)("p",null,"We're working with the Exchange Rates API, so we need to define our input schema to reflect that. Open the ",(0,r.kt)("inlineCode",{parentName:"p"},"spec.json")," file here and replace it with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "documentationUrl": "https://docs.airbyte.io/integrations/sources/exchangeratesapi",\n  "connectionSpecification": {\n    "$schema": "http://json-schema.org/draft-07/schema#",\n    "title": "Python Http Example Spec",\n    "type": "object",\n    "required": ["start_date", "currency_base"],\n    "properties": {\n      "start_date": {\n        "type": "string",\n        "description": "Start getting data from that date.",\n        "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",\n        "examples": ["%Y-%m-%d"]\n      },\n      "base": {\n        "type": "string",\n        "examples": ["USD", "EUR"],\n        "description": "ISO reference currency. See <a href=\\"https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html\\">here</a>."\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Ok, let's write a function that checks the inputs we just defined. Nuke the ",(0,r.kt)("inlineCode",{parentName:"p"},"source.py")," file. Now add this code to it. For a crucial time skip, we're going to define all the imports we need in the future here."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from datetime import datetime, timedelta\nfrom typing import Any, Iterable, List, Mapping, MutableMapping, Optional, Tuple\n\nimport requests\nfrom airbyte_cdk.sources import AbstractSource\nfrom airbyte_cdk.sources.streams import Stream\nfrom airbyte_cdk.sources.streams.http import HttpStream\nfrom airbyte_cdk.sources.streams.http.auth import NoAuth\n\nclass SourcePythonHttpExample(AbstractSource):\n    def check_connection(self, logger, config) -> Tuple[bool, any]:\n        accepted_currencies = {\n            "USD",\n            "JPY",\n            "BGN",\n            "CZK",\n            "DKK",\n        }  # there are more currencies but let\'s assume these are the only allowed ones\n        input_currency = config["base"]\n        if input_currency not in accepted_currencies:\n            return False, f"Input currency {input_currency} is invalid. Please input one of the following currencies: {accepted_currencies}"\n        else:\n            return True, None\n\n    def streams(self, config: Mapping[str, Any]) -> List[Stream]:\n        # Parse the date from a string into a datetime object.\n        start_date = datetime.strptime(config["start_date"], "%Y-%m-%d")\n        \n        # NoAuth just means there is no authentication required for this API and is included for completeness.\n        # Skip passing an authenticator if no authentication is required.\n        # Other authenticators are available for API token-based auth and Oauth2. \n        auth = NoAuth()\n        return [ExchangeRates(authenticator=auth, base=config["base"], start_date=start_date)]\n')),(0,r.kt)("p",null,"Test it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'cd ..\nmkdir sample_files\necho \'{"start_date": "2021-04-01", "base": "USD"}\'  > sample_files/config.json\necho \'{"start_date": "2021-04-01", "base": "BTC"}\'  > sample_files/invalid_config.json\npython main.py check --config sample_files/config.json\npython main.py check --config sample_files/invalid_config.json\n')),(0,r.kt)("p",null,"Expected output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'> python main.py check --config sample_files/config.json\n{"type": "CONNECTION_STATUS", "connectionStatus": {"status": "SUCCEEDED"}}\n\n> python main.py check --config sample_files/invalid_config.json\n{"type": "CONNECTION_STATUS", "connectionStatus": {"status": "FAILED", "message": "Input currency BTC is invalid. Please input one of the following currencies: {\'DKK\', \'USD\', \'CZK\', \'BGN\', \'JPY\'}"}}\n')),(0,r.kt)("h3",{id:"define-your-stream"},"Define your Stream"),(0,r.kt)("p",null,"In your ",(0,r.kt)("inlineCode",{parentName:"p"},"source.py")," file, add this ",(0,r.kt)("inlineCode",{parentName:"p"},"ExchangeRates")," class. This stream represents an endpoint you want to hit."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from airbyte_cdk.sources.streams.http import HttpStream\n\nclass ExchangeRates(HttpStream):\n    url_base = "https://api.exchangeratesapi.io/"\n\n    # Set this as a noop.\n    primary_key = None\n\n    def next_page_token(self, response: requests.Response) -> Optional[Mapping[str, Any]]:\n        # The API does not offer pagination, so we return None to indicate there are no more pages in the response\n        return None\n\n    def path(\n        self, \n    ) -> str:\n        return ""  # TODO\n\n    def parse_response(\n        self,\n    ) -> Iterable[Mapping]:\n        return None  # TODO\n')),(0,r.kt)("p",null,"Now download ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/airbytehq/airbyte/blob/master/airbyte-cdk/python/docs/tutorials/http_api_source_assets/exchange_rates.json"},"this file"),". Name it ",(0,r.kt)("inlineCode",{parentName:"p"},"exchange_rates.json")," and place it in ",(0,r.kt)("inlineCode",{parentName:"p"},"/source_python_http_example/schemas"),". It defines your output schema."),(0,r.kt)("p",null,"Test your discover function. You should receive a fairly large JSON object in return."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python main.py discover --config sample_files/config.json\n")),(0,r.kt)("h3",{id:"reading-data-from-the-source"},"Reading Data from the Source"),(0,r.kt)("p",null,"Update your ",(0,r.kt)("inlineCode",{parentName:"p"},"ExchangeRates")," class to implement the required functions as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class ExchangeRates(HttpStream):\n    url_base = "https://api.exchangeratesapi.io/"\n\n    primary_key = None\n\n    def __init__(self, base: str, **kwargs):\n        super().__init__()\n        self.base = base\n\n\n    def path(\n            self,\n            stream_state: Mapping[str, Any] = None,\n            stream_slice: Mapping[str, Any] = None,\n            next_page_token: Mapping[str, Any] = None\n    ) -> str:\n        # The "/latest" path gives us the latest currency exchange rates\n        return "latest"\n\n    def request_params(\n            self,\n            stream_state: Mapping[str, Any],\n            stream_slice: Mapping[str, Any] = None,\n            next_page_token: Mapping[str, Any] = None,\n    ) -> MutableMapping[str, Any]:\n        # The api requires that we include the base currency as a query param so we do that in this method\n        return {\'base\': self.base}\n\n    def parse_response(\n            self,\n            response: requests.Response,\n            stream_state: Mapping[str, Any],\n            stream_slice: Mapping[str, Any] = None,\n            next_page_token: Mapping[str, Any] = None,\n    ) -> Iterable[Mapping]:\n        # The response is a simple JSON whose schema matches our stream\'s schema exactly, \n        # so we just return a list containing the response\n        return [response.json()]\n\n    def next_page_token(self, response: requests.Response) -> Optional[Mapping[str, Any]]:\n        # The API does not offer pagination, \n        # so we return None to indicate there are no more pages in the response\n        return None\n')),(0,r.kt)("p",null,"Update your ",(0,r.kt)("inlineCode",{parentName:"p"},"streams")," method in your ",(0,r.kt)("inlineCode",{parentName:"p"},"SourcePythonHttpExample")," class to use the currency base passed in from the stream above."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def streams(self, config: Mapping[str, Any]) -> List[Stream]:\n        auth = NoAuth()\n        return [ExchangeRates(authenticator=auth, base=config['base'])]\n")),(0,r.kt)("p",null,"We now need a catalog that defines all of our streams. We only have one, ",(0,r.kt)("inlineCode",{parentName:"p"},"ExchangeRates"),". Download that file ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/airbytehq/airbyte/blob/master/airbyte-cdk/python/docs/tutorials/http_api_source_assets/configured_catalog.json"},"here"),". Place it in ",(0,r.kt)("inlineCode",{parentName:"p"},"/sample_files")," named as ",(0,r.kt)("inlineCode",{parentName:"p"},"configured_catalog.json"),"."),(0,r.kt)("p",null,"Let's read some data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python main.py read --config sample_files/config.json --catalog sample_files/configured_catalog.json\n")),(0,r.kt)("p",null,"If all goes well, containerize it so you can use it in the UI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker build . -t airbyte/source-python-http-example:dev\n")),(0,r.kt)("p",null,"You're done. Stop the clock :",")"))}u.isMDXComponent=!0}}]);