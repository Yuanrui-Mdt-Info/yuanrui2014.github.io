"use strict";(self.webpackChunkdocu=self.webpackChunkdocu||[]).push([[7251],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>u});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(r),u=a,f=d["".concat(l,".").concat(u)]||d[u]||m[u]||i;return r?n.createElement(f,s(s({ref:t},c),{},{components:r})):n.createElement(f,s({ref:t},c))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},31301:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const i={},s="Stream Slicers",o={unversionedId:"connector-development/config-based/stream-slicers",id:"connector-development/config-based/stream-slicers",title:"Stream Slicers",description:"StreamSlicers define how to partition a stream into a subset of records.",source:"@site/../docs/connector-development/config-based/stream-slicers.md",sourceDirName:"connector-development/config-based",slug:"/connector-development/config-based/stream-slicers",permalink:"/connector-development/config-based/stream-slicers",draft:!1,editUrl:"https://github.com/airbytehq/airbyte/blob/master/docs/../docs/connector-development/config-based/stream-slicers.md",tags:[],version:"current",frontMatter:{}},l={},p=[{value:"Implementations",id:"implementations",level:2},{value:"Datetime",id:"datetime",level:3},{value:"Cursor update",id:"cursor-update",level:4},{value:"Stream slicer on dates",id:"stream-slicer-on-dates",level:4},{value:"List stream slicer",id:"list-stream-slicer",level:3},{value:"Cartesian Product stream slicer",id:"cartesian-product-stream-slicer",level:3},{value:"Substream slicer",id:"substream-slicer",level:3},{value:"More readings",id:"more-readings",level:2}],c={toc:p};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"stream-slicers"},"Stream Slicers"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"StreamSlicer"),"s define how to partition a stream into a subset of records."),(0,a.kt)("p",null,"It can be thought of as an iterator over the stream's data, where a ",(0,a.kt)("inlineCode",{parentName:"p"},"StreamSlice")," is the retriever's unit of work."),(0,a.kt)("p",null,"When a stream is read incrementally, a state message will be output by the connector after reading every slice, which allows for ",(0,a.kt)("a",{parentName:"p",href:"https://docs.airbyte.com/understanding-airbyte/airbyte-protocol/#state--checkpointing"},"checkpointing"),"."),(0,a.kt)("p",null,"At the beginning of a ",(0,a.kt)("inlineCode",{parentName:"p"},"read")," operation, the ",(0,a.kt)("inlineCode",{parentName:"p"},"StreamSlicer")," will compute the slices to sync given the connection config and the stream's current state,\nAs the ",(0,a.kt)("inlineCode",{parentName:"p"},"Retriever")," reads data from the ",(0,a.kt)("inlineCode",{parentName:"p"},"Source"),", the ",(0,a.kt)("inlineCode",{parentName:"p"},"StreamSlicer")," keeps track of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Stream"),"'s state, which will be emitted after reading each stream slice."),(0,a.kt)("p",null,"More information of stream slicing can be found in the ",(0,a.kt)("a",{parentName:"p",href:"/connector-development/cdk-python/stream-slices"},"stream-slices section"),"."),(0,a.kt)("h2",{id:"implementations"},"Implementations"),(0,a.kt)("p",null,"This section gives an overview of the stream slicers currently implemented."),(0,a.kt)("h3",{id:"datetime"},"Datetime"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"DatetimeStreamSlicer")," iterates over a datetime range by partitioning it into time windows.\nThis is done by slicing the stream on the records' cursor value, defined by the Stream's ",(0,a.kt)("inlineCode",{parentName:"p"},"cursor_field"),"."),(0,a.kt)("p",null,"Given a start time, an end time, and a step function, it will partition the interval ","[start, end]"," into small windows of the size described by the step.\nFor instance,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'stream_slicer:\n  start_datetime: "2021-02-01T00:00:00.000000+0000",\n  end_datetime: "2021-03-01T00:00:00.000000+0000",\n  step: "1d"\n')),(0,a.kt)("p",null,"will create one slice per day for the interval ",(0,a.kt)("inlineCode",{parentName:"p"},"2021-02-01")," - ",(0,a.kt)("inlineCode",{parentName:"p"},"2021-03-01"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"DatetimeStreamSlicer")," also supports an optional lookback window, specifying how many days before the start_datetime to read data for."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'stream_slicer:\n  start_datetime: "2021-02-01T00:00:00.000000+0000",\n  end_datetime: "2021-03-01T00:00:00.000000+0000",\n  lookback_window: "31d"\n  step: "1d"\n')),(0,a.kt)("p",null,"will read data from ",(0,a.kt)("inlineCode",{parentName:"p"},"2021-01-01")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"2021-03-01"),"."),(0,a.kt)("p",null,"The stream slices will be of the form ",(0,a.kt)("inlineCode",{parentName:"p"},'{"start_date": "2021-02-01T00:00:00.000000+0000", "end_date": "2021-02-01T00:00:00.000000+0000"}'),"\nThe stream slices' field names can be customized through the ",(0,a.kt)("inlineCode",{parentName:"p"},"stream_state_field_start")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"stream_state_field_end")," parameters."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"datetime_format")," can be used to specify the format of the start and end time. It is ",(0,a.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/html/rfc3339#section-5.6"},"RFC3339")," by default."),(0,a.kt)("p",null,"The Stream's state will be derived by reading the record's ",(0,a.kt)("inlineCode",{parentName:"p"},"cursor_field"),".\nIf the ",(0,a.kt)("inlineCode",{parentName:"p"},"cursor_field")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"created"),", and the record is ",(0,a.kt)("inlineCode",{parentName:"p"},'{"id": 1234, "created": "2021-02-02T00:00:00.000000+0000"}'),", then the state after reading that record is ",(0,a.kt)("inlineCode",{parentName:"p"},'"created": "2021-02-02T00:00:00.000000+0000"'),". ",(0,a.kt)("sup",{parentName:"p",id:"fnref-1"},(0,a.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))),(0,a.kt)("h4",{id:"cursor-update"},"Cursor update"),(0,a.kt)("p",null,"When reading data from the source, the cursor value will be updated to the max datetime between"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The last record's cursor field"),(0,a.kt)("li",{parentName:"ul"},"The start of the stream slice"),(0,a.kt)("li",{parentName:"ul"},"The current cursor value. This ensures that the cursor will be updated even if a stream slice does not contain any data")),(0,a.kt)("h4",{id:"stream-slicer-on-dates"},"Stream slicer on dates"),(0,a.kt)("p",null,"If an API supports filtering data based on the cursor field, the ",(0,a.kt)("inlineCode",{parentName:"p"},"start_time_option")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"end_time_option")," parameters can be used to configure this filtering.\nFor instance, if the API supports filtering using the request parameters ",(0,a.kt)("inlineCode",{parentName:"p"},"created[gte]")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"created[lte]"),", then the stream slicer can specify the request parameters as"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'stream_slicer:\n  type: "DatetimeStreamSlicer"\n  <...>\n  start_time_option:\n    field_name: "created[gte]"\n    inject_into: "request_parameter"\n  end_time_option:\n    field_name: "created[lte]"\n    inject_into: "request_parameter"\n')),(0,a.kt)("h3",{id:"list-stream-slicer"},"List stream slicer"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ListStreamSlicer")," iterates over values from a given list.\nIt is defined by"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The slice values, which are the valid values for the cursor field"),(0,a.kt)("li",{parentName:"ul"},"The cursor field on a record"),(0,a.kt)("li",{parentName:"ul"},"request_option: optional request option to set on outgoing request parameters")),(0,a.kt)("p",null,'As an example, this stream slicer will iterate over the 2 repositories ("airbyte" and "airbyte-secret") and will set a request_parameter on outgoing HTTP requests.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'stream_slicer:\n  type: "ListStreamSlicer"\n  slice_values:\n    - "airbyte"\n    - "airbyte-secret"\n  cursor_field: "repository"\n  request_option:\n    field_name: "repository"\n    inject_into: "request_parameter"\n')),(0,a.kt)("h3",{id:"cartesian-product-stream-slicer"},"Cartesian Product stream slicer"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"CartesianProductStreamSlicer")," iterates over the cartesian product of its underlying stream slicers."),(0,a.kt)("p",null,"Given 2 stream slicers with the following slices:\nA: ",(0,a.kt)("inlineCode",{parentName:"p"},'[{"start_date": "2021-01-01", "end_date": "2021-01-01"}, {"start_date": "2021-01-02", "end_date": "2021-01-02"}]'),"\nB: ",(0,a.kt)("inlineCode",{parentName:"p"},'[{"s": "hello"}, {"s": "world"}]'),"\nthe resulting stream slices are"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[\n    {"start_date": "2021-01-01", "end_date": "2021-01-01", "s": "hello"},\n    {"start_date": "2021-01-01", "end_date": "2021-01-01", "s": "world"},\n    {"start_date": "2021-01-02", "end_date": "2021-01-02", "s": "hello"},\n    {"start_date": "2021-02-01", "end_date": "2021-02-01", "s": "world"},\n]\n')),(0,a.kt)("h3",{id:"substream-slicer"},"Substream slicer"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"SubstreamSlicer")," iterates over the parent's stream slices.\nThis is useful for defining sub-resources."),(0,a.kt)("p",null,"We might for instance want to read all the commits for a given repository (parent resource)."),(0,a.kt)("p",null,"For each stream, the slicer needs to know"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"what the parent stream is"),(0,a.kt)("li",{parentName:"ul"},"what is the key of the records in the parent stream"),(0,a.kt)("li",{parentName:"ul"},"what is the field defining the stream slice representing the parent record"),(0,a.kt)("li",{parentName:"ul"},"how to specify that information on an outgoing HTTP request")),(0,a.kt)("p",null,"Assuming the commits for a given repository can be read by specifying the repository as a request_parameter, this could be defined as"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'stream_slicer:\n  type: "SubstreamSlicer"\n  parent_streams_configs:\n    - stream: "*ref(repositories_stream)"\n      parent_key: "id"\n      stream_slice_field: "repository"\n      request_option:\n        field_name: "repository"\n        inject_into: "request_parameter"\n')),(0,a.kt)("p",null,'REST APIs often nest sub-resources in the URL path.\nIf the URL to fetch commits was "/repositories/:id/commits", then the ',(0,a.kt)("inlineCode",{parentName:"p"},"Requester"),"'s path would need to refer to the stream slice's value and no ",(0,a.kt)("inlineCode",{parentName:"p"},"request_option")," would be set:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'retriever:\n  <...>\n  requester:\n    <...>\n    path: "/respositories/{{ stream_slice.repository }}/commits\n  stream_slicer:\n    type: "SubstreamSlicer"\n    parent_streams_configs:\n      - stream: "*ref(repositories_stream)"\n        parent_key: "id"\n        stream_slice_field: "repository"\n')),(0,a.kt)("p",null,(0,a.kt)("sup",{parentName:"p",id:"fnref-1"},(0,a.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))," This is a slight oversimplification. See ",(0,a.kt)("a",{parentName:"p",href:"#cursor-update"},"update cursor section")," for more details on how the cursor is updated."),(0,a.kt)("h2",{id:"more-readings"},"More readings"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/connector-development/cdk-python/incremental-stream"},"Incremental streams")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/connector-development/cdk-python/stream-slices"},"Stream slices"))))}m.isMDXComponent=!0}}]);