"use strict";(self.webpackChunkdocu=self.webpackChunkdocu||[]).push([[7863],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=u(r),d=i,y=g["".concat(l,".").concat(d)]||g[d]||c[d]||a;return r?n.createElement(y,o(o({ref:t},p),{},{components:r})):n.createElement(y,o({ref:t},p))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},27786:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var n=r(87462),i=(r(67294),r(3905));const a={description:"Start triggering Airbyte jobs with Dagster in minutes"},o="Using the Dagster Integration",s={unversionedId:"operator-guides/using-dagster-integration",id:"operator-guides/using-dagster-integration",title:"Using the Dagster Integration",description:"Start triggering Airbyte jobs with Dagster in minutes",source:"@site/../docs/operator-guides/using-dagster-integration.md",sourceDirName:"operator-guides",slug:"/operator-guides/using-dagster-integration",permalink:"/operator-guides/using-dagster-integration",draft:!1,editUrl:"https://github.com/airbytehq/airbyte/blob/master/docs/../docs/operator-guides/using-dagster-integration.md",tags:[],version:"current",frontMatter:{description:"Start triggering Airbyte jobs with Dagster in minutes"},sidebar:"mySidebar",previous:{title:"Using the Prefect Airbyte Task",permalink:"/operator-guides/using-prefect-task"},next:{title:"Windows - Browsing Local File Output",permalink:"/operator-guides/locating-files-local-destination"}},l={},u=[{value:"1. Set up the tools",id:"1-set-up-the-tools",level:2},{value:"Start Airbyte",id:"start-airbyte",level:3},{value:"Install Dagster",id:"install-dagster",level:3},{value:"2. Create the Dagster Op to trigger your Airbyte job",id:"2-create-the-dagster-op-to-trigger-your-airbyte-job",level:2},{value:"Creating a simple Dagster DAG to run an Airbyte Sync Job",id:"creating-a-simple-dagster-dag-to-run-an-airbyte-sync-job",level:3},{value:"That&#39;s it!",id:"thats-it",level:2}],p={toc:u};function c(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"using-the-dagster-integration"},"Using the Dagster Integration"),(0,i.kt)("p",null,"Airbyte is an official integration in the Dagster project. The Airbyte Integration allows you to trigger synchronization jobs in Airbyte, and this tutorial will walk through configuring your Dagster Ops to do so."),(0,i.kt)("p",null,"The Airbyte Task documentation on Dagster project can be found ",(0,i.kt)("a",{parentName:"p",href:"https://docs.dagster.io/_apidocs/libraries/dagster-airbyte"},"here"),"."),(0,i.kt)("h2",{id:"1-set-up-the-tools"},"1. Set up the tools"),(0,i.kt)("p",null,"First, make sure you have Docker installed. We'll be using the ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose")," command, so your install should contain ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-compose"),"."),(0,i.kt)("h3",{id:"start-airbyte"},"Start Airbyte"),(0,i.kt)("p",null,"If this is your first time using Airbyte, we suggest going through our ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/airbytehq/airbyte/tree/e378d40236b6a34e1c1cb481c8952735ec687d88/docs/quickstart/getting-started.md"},"Basic Tutorial"),". This tutorial will use the Connection set up in the basic tutorial."),(0,i.kt)("p",null,"For the purposes of this tutorial, set your Connection's ",(0,i.kt)("strong",{parentName:"p"},"sync frequency")," to ",(0,i.kt)("strong",{parentName:"p"},"manual"),". Dagster will be responsible for manually triggering the Airbyte job."),(0,i.kt)("h3",{id:"install-dagster"},"Install Dagster"),(0,i.kt)("p",null,"If you don't have a Dagster installed, we recommend following this ",(0,i.kt)("a",{parentName:"p",href:"https://docs.dagster.io/getting-started"},"guide")," to set one up."),(0,i.kt)("h2",{id:"2-create-the-dagster-op-to-trigger-your-airbyte-job"},"2. Create the Dagster Op to trigger your Airbyte job"),(0,i.kt)("h3",{id:"creating-a-simple-dagster-dag-to-run-an-airbyte-sync-job"},"Creating a simple Dagster DAG to run an Airbyte Sync Job"),(0,i.kt)("p",null,"Create a new folder called ",(0,i.kt)("inlineCode",{parentName:"p"},"airbyte_dagster")," and create a file ",(0,i.kt)("inlineCode",{parentName:"p"},"airbyte_dagster.py"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from dagster import job\nfrom dagster_airbyte import airbyte_resource, airbyte_sync_op\n\nmy_airbyte_resource = airbyte_resource.configured(\n    {\n        "host": {"env": "AIRBYTE_HOST"},\n        "port": {"env": "AIRBYTE_PORT"},\n    }\n)\nsync_foobar = airbyte_sync_op.configured({"connection_id": "your-connection-uuid"}, name="sync_foobar")\n\n@job(resource_defs={"airbyte": my_airbyte_resource})\ndef my_simple_airbyte_job():\n    sync_foobar()\n\n')),(0,i.kt)("p",null,"The Airbyte Dagster Resource accepts the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"host"),": The host URL to your Airbyte instance."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"port"),": The port value you have selected for your Airbyte instance."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"use_https"),": If your server use secure HTTP connection."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"request_max_retries"),": The maximum number of times requests to the Airbyte API should be retried before failing."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"request_retry_delay"),": Time in seconds to wait between each request retry.")),(0,i.kt)("p",null,"The Airbyte Dagster Op accepts the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"connection_id"),": The Connection UUID you want to trigger"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"poll_interval"),": The time in seconds that will be waited between successive polls."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"poll_timeout"),": he maximum time that will waited before this operation is timed out.")),(0,i.kt)("p",null,"After running the file, ",(0,i.kt)("inlineCode",{parentName:"p"},"dagster job execute -f airbyte_dagster.py ")," this will trigger the job with Dagster."),(0,i.kt)("h2",{id:"thats-it"},"That's it!"),(0,i.kt)("p",null,"Don't be fooled by our simple example of only one Dagster Flow. Airbyte is a powerful data integration platform supporting many sources and destinations. The Airbyte Dagster Integration means Airbyte can now be easily used with the Dagster ecosystem - give it a shot!"),(0,i.kt)("p",null,"We love to hear any questions or feedback on our ",(0,i.kt)("a",{parentName:"p",href:"https://slack.airbyte.io/"},"Slack"),". We're still in alpha, so if you see any rough edges or want to request a connector, feel free to create an issue on our ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/airbytehq/airbyte"},"Github")," or thumbs up an existing issue."))}c.isMDXComponent=!0}}]);