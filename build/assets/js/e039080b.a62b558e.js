"use strict";(self.webpackChunkdocu=self.webpackChunkdocu||[]).push([[8151],{3905:(e,r,n)=>{n.d(r,{Zo:()=>d,kt:()=>u});var t=n(67294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=t.createContext({}),c=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},d=function(e){var r=c(e.components);return t.createElement(s.Provider,{value:r},e.children)},f={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),u=a,h=p["".concat(s,".").concat(u)]||p[u]||f[u]||o;return n?t.createElement(h,i(i({ref:r},d),{},{components:n})):t.createElement(h,i({ref:r},d))}));function u(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},54290:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var t=n(87462),a=(n(67294),n(3905));const o={},i="Error handling",l={unversionedId:"connector-development/config-based/error-handling",id:"connector-development/config-based/error-handling",title:"Error handling",description:"By default, only server errors (HTTP 5XX) and too many requests (HTTP 429) will be retried up to 5 times with exponential backoff.",source:"@site/../docs/connector-development/config-based/error-handling.md",sourceDirName:"connector-development/config-based",slug:"/connector-development/config-based/error-handling",permalink:"/connector-development/config-based/error-handling",draft:!1,editUrl:"https://github.com/airbytehq/airbyte/blob/master/docs/../docs/connector-development/config-based/error-handling.md",tags:[],version:"current",frontMatter:{}},s={},c=[{value:"Defining errors",id:"defining-errors",level:2},{value:"From status code",id:"from-status-code",level:3},{value:"From error message",id:"from-error-message",level:3},{value:"Backoff Strategies",id:"backoff-strategies",level:2},{value:"Exponential backoff",id:"exponential-backoff",level:3},{value:"Constant Backoff",id:"constant-backoff",level:3},{value:"Wait time defined in header",id:"wait-time-defined-in-header",level:3},{value:"Wait until time defined in header",id:"wait-until-time-defined-in-header",level:3},{value:"Advanced error handling",id:"advanced-error-handling",level:2}],d={toc:c};function f(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"error-handling"},"Error handling"),(0,a.kt)("p",null,"By default, only server errors (HTTP 5XX) and too many requests (HTTP 429) will be retried up to 5 times with exponential backoff.\nOther HTTP errors will result in a failed read."),(0,a.kt)("p",null,"Other behaviors can be configured through the ",(0,a.kt)("inlineCode",{parentName:"p"},"Requester"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"error_handler")," field."),(0,a.kt)("h2",{id:"defining-errors"},"Defining errors"),(0,a.kt)("h3",{id:"from-status-code"},"From status code"),(0,a.kt)("p",null,"Response filters can be used to define how to handle requests resulting in responses with a specific HTTP status code.\nFor instance, this example will configure the handler to also retry responses with 404 error:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"requester:\n  <...>\n  error_handler:\n    response_filters:\n        - http_codes: [ 404 ]\n          action: RETRY\n")),(0,a.kt)("p",null,"Response filters can be used to specify HTTP errors to ignore.\nFor instance, this example will configure the handler to ignore responses with 404 error:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"requester:\n  <...>\n  error_handler:\n    response_filters:\n        - http_codes: [ 404 ]\n          action: IGNORE\n")),(0,a.kt)("h3",{id:"from-error-message"},"From error message"),(0,a.kt)("p",null,'Errors can also be defined by parsing the error message.\nFor instance, this error handler will ignore responses if the error message contains the string "ignorethisresponse"'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'requester:\n  <...>\n  error_handler:\n    response_filters:\n        - error_message_contain: "ignorethisresponse"\n          action: IGNORE\n')),(0,a.kt)("p",null,"This can also be done through a more generic string interpolation strategy with the following parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"response: the decoded response")),(0,a.kt)("p",null,'This example ignores errors where the response contains a "code" field:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"requester:\n  <...>\n  error_handler:\n    response_filters:\n        - predicate: \"{{ 'code' in response }}\"\n          action: IGNORE\n")),(0,a.kt)("p",null,"The error handler can have multiple response filters.\nThe following example is configured to ignore 404 errors, and retry 429 errors:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"requester:\n  <...>\n  error_handler:\n    response_filters:\n        - http_codes: [ 404 ]\n          action: IGNORE\n            - http_codes: [ 429 ]\n              action: RETRY\n")),(0,a.kt)("h2",{id:"backoff-strategies"},"Backoff Strategies"),(0,a.kt)("p",null,"The error handler supports a few backoff strategies, which are described in the following sections."),(0,a.kt)("h3",{id:"exponential-backoff"},"Exponential backoff"),(0,a.kt)("p",null,"This is the default backoff strategy. The requester will backoff with an exponential backoff interval"),(0,a.kt)("h3",{id:"constant-backoff"},"Constant Backoff"),(0,a.kt)("p",null,"When using the ",(0,a.kt)("inlineCode",{parentName:"p"},"ConstantBackoffStrategy"),", the requester will backoff with a constant interval."),(0,a.kt)("h3",{id:"wait-time-defined-in-header"},"Wait time defined in header"),(0,a.kt)("p",null,"When using the ",(0,a.kt)("inlineCode",{parentName:"p"},"WaitTimeFromHeaderBackoffStrategy"),', the requester will backoff by an interval specified in the response header.\nIn this example, the requester will backoff by the response\'s "wait_time" header value:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'requester:\n  <...>\n  error_handler:\n    <...>\n    backoff_strategies:\n        - type: "WaitTimeFromHeaderBackoffStrategy"\n          header: "wait_time"\n')),(0,a.kt)("p",null,"Optionally, a regular expression can be configured to extract the wait time from the header value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'requester:\n  <...>\n  error_handler:\n    <...>\n    backoff_strategies:\n        - type: "WaitTimeFromHeaderBackoffStrategy"\n          header: "wait_time"\n          regex: "[-+]?\\d+"\n')),(0,a.kt)("h3",{id:"wait-until-time-defined-in-header"},"Wait until time defined in header"),(0,a.kt)("p",null,"When using the ",(0,a.kt)("inlineCode",{parentName:"p"},"WaitUntilTimeFromHeaderBackoffStrategy"),', the requester will backoff until the time specified in the response header.\nIn this example, the requester will wait until the time specified in the "wait_until" header value:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'requester:\n  <...>\n  error_handler:\n    <...>\n    backoff_strategies:\n        - type: "WaitUntilTimeFromHeaderBackoffStrategy"\n          header: "wait_until"\n          regex: "[-+]?\\d+"\n          min_wait: 5\n')),(0,a.kt)("p",null,"The strategy accepts an optional regular expression to extract the time from the header value, and a minimum time to wait."),(0,a.kt)("h2",{id:"advanced-error-handling"},"Advanced error handling"),(0,a.kt)("p",null,"The error handler can have multiple backoff strategies, allowing it to fallback if a strategy cannot be evaluated.\nFor instance, the following defines an error handler that will read the backoff time from a header, and default to a constant backoff if the wait time could not be extracted from the response:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'requester:\n  <...>\n  error_handler:\n    <...>\n    backoff_strategies:\n        - type: "WaitTimeFromHeaderBackoffStrategy"\n          header: "wait_time"\n            - type: "ConstantBackoffStrategy"\n              backoff_time_in_seconds: 5\n\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"requester")," can be configured to use a ",(0,a.kt)("inlineCode",{parentName:"p"},"CompositeErrorHandler"),", which sequentially iterates over a list of error handlers, enabling different retry mechanisms for different types of errors."),(0,a.kt)("p",null,'In this example, a constant backoff of 5 seconds, will be applied if the response contains a "code" field, and an exponential backoff will be applied if the error code is 403:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'requester:\n  <...>\n  error_handler:\n    type: "CompositeErrorHandler"\n    error_handlers:\n      - response_filters:\n          - predicate: "{{ \'code\' in response }}"\n            action: RETRY\n        backoff_strategies:\n          - type: "ConstantBackoffStrategy"\n            backoff_time_in_seconds: 5\n      - response_filters:\n          - http_codes: [ 403 ]\n            action: RETRY\n        backoff_strategies:\n          - type: "ExponentialBackoffStrategy"\n')))}f.isMDXComponent=!0}}]);